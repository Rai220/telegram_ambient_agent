from langgraph.graph import END, START, MessagesState, StateGraph
from langgraph.checkpoint.memory import MemorySaver
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
import settings
from datetime import datetime
import pytz

# pip install python-dotenv
from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

gpt = ChatOpenAI(model="gpt-4o")


class AmbientAssistantState(MessagesState):
    chat_history: str
    bio: str
    answer: str


def _write_answer(state: AmbientAssistantState):
    TEMPLATE = """–¢—ã - –º–æ–π –∞–≥–µ–Ω—Ç, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –¥–µ–ª–æ–≤–æ–π, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –æ–±–æ—Ä–æ—Ç–æ–≤. –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - {time}

–í–æ—Ç –º–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è:
<bio>
{bio}
</bio>

–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ 
–∏–º–µ—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ–ª—É.

–ü–æ–∫–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –ø–æ—ç—Ç–æ–º—É –∏–ø—Ä–æ–≤–∏–∑–∏—Ä—É–π.

<chat_history>
{chat_history}
</chat_history>

–ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏, –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.
"""
    chat_template = ChatPromptTemplate.from_messages(
        [
            ("system", TEMPLATE),
        ]
    )

    pipe = chat_template | gpt | StrOutputParser()
    current_datetime = datetime.now(pytz.timezone(settings.timezone))

    resp = pipe.invoke(
        {
            "bio": state["bio"],
            "chat_history": state["chat_history"],
            "time": current_datetime.strftime("%Y-%m-%d %H:%M:%S"),
        }
    )

    return {"answer": resp}


builder = StateGraph(AmbientAssistantState)
builder.add_node("üë®‚Äçüíª Agent", _write_answer)

builder.add_edge(START, "üë®‚Äçüíª Agent")
builder.add_edge("üë®‚Äçüíª Agent", END)

graph = builder.compile(checkpointer=MemorySaver())


def answer(chat_history):
    inputs = {
        "chat_history": chat_history,
        "bio": settings.bio,
    }

    config = {"configurable": {"thread_id": "1"}}
    for output in graph.stream(inputs, config=config, stream_mode="updates"):
        current_agent = next(iter(output))
        # print(f"–û—Ç—Ä–∞–±–æ—Ç–∞–ª –∞–≥–µ–Ω—Ç {current_agent}")

    return graph.get_state(config=config).values["answer"]
