from datetime import datetime

import pytz

# pip install python-dotenv
from dotenv import find_dotenv, load_dotenv
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import PydanticOutputParser, StrOutputParser
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, MessagesState, StateGraph
from pydantic import BaseModel, Field

import settings

load_dotenv(find_dotenv())

gpt = ChatOpenAI(model="gpt-4o")


class AnswerModel(BaseModel):
    """–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    thoughts: str = Field(description="–ú—ã—Å–ª–∏ –æ —Ç–æ–º, –∫–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç")
    answer: str = Field(description="–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    thoughts_useful: str = Field(
        description="–ú—ã—Å–ª–∏ –æ —Ç–æ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º? –°—ç–∫–æ–Ω–æ–º–∏—Ç –ª–∏ –æ–Ω –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å?"
    )
    need_to_send: bool = Field(description="–°–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?")


class AmbientAssistantState(MessagesState):
    chat_history: str
    bio: str
    answer: str
    need_to_send: bool


AGENT_TEMPLATE = """–¢—ã - –º–æ–π –∞–≥–µ–Ω—Ç, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –¥–µ–ª–æ–≤–æ–π, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –æ–±–æ—Ä–æ—Ç–æ–≤. –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - {time}

–í–æ—Ç –º–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è:
<bio>
{bio}
</bio>

–ü–æ–∫–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –ø–æ—ç—Ç–æ–º—É –∏–ø—Ä–æ–≤–∏–∑–∏—Ä—É–π. –¢–∞–∫–∂–µ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã.

–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ 
–∏–º–µ—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ–ª—É.
<chat_history>
{chat_history}
</chat_history>

–í –æ—Ç–≤–µ—Ç–µ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á–µ–ª–æ–≤–µ–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–µ–¥—ã–¥—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã - –æ–Ω –≤ –∫—É—Ä—Å–µ –∏ —Ç–æ–∂–µ –≤–∏–¥–∏—Ç –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.

–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{format_instructions}
"""


def _answer(state: AmbientAssistantState) -> AnswerModel:    
    parser = PydanticOutputParser(pydantic_object=AnswerModel)
    prompt = ChatPromptTemplate.from_messages([
        ("system", AGENT_TEMPLATE)
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | gpt | parser
    current_datetime = datetime.now(pytz.timezone(settings.timezone))
    
    resp = chain.invoke(
        {
            "bio": state["bio"],
            "chat_history": state["chat_history"],
            "time": current_datetime.strftime("%Y-%m-%d %H:%M:%S"),
        }
    )

    return resp


builder = StateGraph(AmbientAssistantState)
builder.add_node("üë®‚Äçüíª Agent", _answer)

builder.add_edge(START, "üë®‚Äçüíª Agent")
builder.add_edge("üë®‚Äçüíª Agent", END)

graph = builder.compile(checkpointer=MemorySaver())


def answer(chat_id: str, chat_history) -> AnswerModel:
    inputs = {
        "chat_history": chat_history,
        "bio": settings.bio,
    }

    config = {"configurable": {"thread_id": chat_id}}
    try:
        for output in graph.stream(inputs, config=config, stream_mode="updates"):
            current_agent = next(iter(output))
            # print(f"–û—Ç—Ä–∞–±–æ—Ç–∞–ª –∞–≥–µ–Ω—Ç {current_agent}")

        return graph.get_state(config=config)
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
